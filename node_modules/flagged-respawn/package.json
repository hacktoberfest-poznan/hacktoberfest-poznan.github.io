{
  "_args": [
    [
      {
        "raw": "flagged-respawn@^1.0.0",
        "scope": null,
        "escapedName": "flagged-respawn",
        "name": "flagged-respawn",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/alorenc/Documents/projects/hacktoberfest-poznan.github.io/node_modules/liftoff"
    ]
  ],
  "_from": "flagged-respawn@>=1.0.0 <2.0.0",
  "_id": "flagged-respawn@1.0.0",
  "_inCache": true,
  "_location": "/flagged-respawn",
  "_nodeVersion": "0.10.48",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/flagged-respawn-1.0.0.tgz_1513468186583_0.7541352626867592"
  },
  "_npmUser": {
    "name": "phated",
    "email": "blaine.bublitz@gmail.com"
  },
  "_npmVersion": "2.15.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "flagged-respawn@^1.0.0",
    "scope": null,
    "escapedName": "flagged-respawn",
    "name": "flagged-respawn",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/liftoff"
  ],
  "_resolved": "https://registry.npmjs.org/flagged-respawn/-/flagged-respawn-1.0.0.tgz",
  "_shasum": "4e79ae9b2eb38bf86b3bb56bf3e0a56aa5fcabd7",
  "_shrinkwrap": null,
  "_spec": "flagged-respawn@^1.0.0",
  "_where": "/Users/alorenc/Documents/projects/hacktoberfest-poznan.github.io/node_modules/liftoff",
  "author": {
    "name": "Tyler Kellen",
    "url": "http://goingslowly.com/"
  },
  "bugs": {
    "url": "https://github.com/js-cli/js-flagged-respawn/issues"
  },
  "dependencies": {},
  "description": "A tool for respawning node binaries when special flags are present.",
  "devDependencies": {
    "chai": "^3.5.0",
    "jscs": "^3.0.7",
    "jshint": "^2.9.5",
    "mocha": "^3.5.3",
    "nyc": "^11.3.0",
    "v8flags": "^3.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "4e79ae9b2eb38bf86b3bb56bf3e0a56aa5fcabd7",
    "tarball": "https://registry.npmjs.org/flagged-respawn/-/flagged-respawn-1.0.0.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "files": [
    "index.js",
    "lib/"
  ],
  "gitHead": "81d23e8973c7f2c69dccf313a320628bd068a721",
  "homepage": "https://github.com/js-cli/js-flagged-respawn",
  "keywords": [
    "respawn flags"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "phated",
      "email": "blaine.bublitz@gmail.com"
    },
    {
      "name": "tusbar",
      "email": "bertrand.marron@gmail.com"
    },
    {
      "name": "tkellen",
      "email": "tyler@sleekcode.net"
    }
  ],
  "name": "flagged-respawn",
  "optionalDependencies": {},
  "readme": "# flagged-respawn [![Build Status](https://secure.travis-ci.org/js-cli/js-flagged-respawn.svg)](http://travis-ci.org/js-cli/js-flagged-respawn)\n> A tool for respawning node binaries when special flags are present.\n\n[![NPM](https://nodei.co/npm/flagged-respawn.png)](https://nodei.co/npm/flagged-respawn/)\n\n## What is it?\n\nSay you wrote a command line tool that runs arbitrary javascript (e.g. task runner, test framework, etc). For the sake of discussion, let's pretend it's a testing harness you've named `testify`.\n\nEverything is going splendidly until one day you decide to test some code that relies on a feature behind a v8 flag in node (`--harmony`, for example).  Without much thought, you run `testify --harmony spec tests.js`.\n\nIt doesn't work. After digging around for a bit, you realize this produces a [`process.argv`](http://nodejs.org/docs/latest/api/process.html#process_process_argv) of:\n\n`['node', '/usr/local/bin/test', '--harmony', 'spec', 'tests.js']`\n\nCrap. The `--harmony` flag is in the wrong place! It should be applied to the **node** command, not our binary. What we actually wanted was this:\n\n`['node', '--harmony', '/usr/local/bin/test', 'spec', 'tests.js']`\n\nFlagged-respawn fixes this problem and handles all the edge cases respawning creates, such as:\n- Providing a method to determine if a respawn is needed.\n- Piping stderr/stdout from the child into the parent.\n- Making the parent process exit with the same code as the child.\n- If the child is killed, making the parent exit with the same signal.\n\nTo see it in action, clone this repository and run `npm install` / `npm run respawn` / `npm run nospawn`.\n\n## Sample Usage\n\n```js\n#!/usr/bin/env node\n\nconst flaggedRespawn = require('flagged-respawn');\n\n// get a list of all possible v8 flags for the running version of node\nconst v8flags = require('v8flags').fetch();\n\nflaggedRespawn(v8flags, process.argv, function (ready, child) {\n  if (ready) {\n    console.log('Running!');\n    // your cli code here\n  } else {\n    console.log('Special flags found, respawning.');\n  }\n  if (process.pid !== child.pid) {\n    console.log('Respawned to PID:', child.pid);\n  }\n});\n\n```\n\n\n## API\n\n### <u>flaggedRespawn(flags, argv, [ forcedFlags, ] callback) : Void</u>\n\nRespawns the script itself when *argv* has special flag contained in *flags* and/or *forcedFlags* is not empty. Because members of *flags* and *forcedFlags* are passed to `node` command, each of them needs to be a node flag or a V8 flag.\n\n#### Forbid respawning\n\nIf `--no-respawning` flag is given in *argv*, this function does not respawned even if *argv* contains members of flags or *forcedFlags* is not empty. (This flag is also used internally to prevent from respawning more than once).\n\n#### Parameter:\n\n| Parameter     |  Type  | Description |\n|:--------------|:------:|:----------------------------------------------------|\n| *flags*       | Array  | An array of node flags and V8 flags which are available when present in *argv*. |\n| *argv*        | Array  | Command line arguments to respawn.   |\n| *forcedFlags* | Array or String  | An array of node flags or a string of a single flag and V8 flags for respawning forcely. |\n| *callback*    | function | A called function when not respawning or after respawned. |\n\n* **<u><i>callback</i>(ready, proc, argv) : Void</u>**\n\n    *callback* function is called both when respawned or not, and it can be distinguished by callback's argument: *ready*. (*ready* indicates whether a process spawned its child process (false) or not (true), but it does not indicate whether a process is a spawned child process or not. *ready* for a spawned child process is true.)\n    \n    *argv* is an array of command line arguments which is respawned (when *ready* is false) or is passed current process except flags within *flags* and `--no-respawning` (when *ready* is true).\n\n    **Parameter:**\n    \n    | Parameter |  Type   | Description               |\n    |:----------|:-------:|:--------------------------|\n    | *ready*   | boolean | True, if not respawning and is ready to execute main function. |\n    | *proc*    | object  | Child process object if respawned, otherwise current process object. |\n    | *argv*    | Array   | An array of command line arguments. |\n\n## Release History\n\n* 2017-12-16 - v1.0.0 - Force/Forbid respawn, Improved API & testing\n* 2016-03-22 - v0.3.2 - fix issue with v8 flags values being dropped\n* 2014-09-12 - v0.3.1 - use `{ stdio: 'inherit' }` for spawn to maintain colors\n* 2014-09-11 - v0.3.0 - for real this time\n* 2014-09-11 - v0.2.0 - cleanup\n* 2014-09-04 - v0.1.1 - initial release\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/js-cli/js-flagged-respawn.git"
  },
  "scripts": {
    "cover": "nyc --reporter=lcov --reporter=text-summary npm test",
    "lint": "jshint index.js lib/ && jscs index.js lib/",
    "nospawn": "node test/bin/respawner test",
    "respawn": "node test/bin/respawner --harmony test",
    "test": "npm run lint && mocha -R spec test"
  },
  "version": "1.0.0"
}
